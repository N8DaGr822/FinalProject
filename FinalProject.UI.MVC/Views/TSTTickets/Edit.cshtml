@model FinalProject.Data.EF.TSTTicket

@{
    ViewBag.Title = "Edit";
}

<h2 style="text-align:center;">Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Subject)
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.SubmitedByID)
    @Html.HiddenFor(model => model.Description)
    @Html.HiddenFor(model => model.CreatedDate)

    <div class="form-horizontal">
        <h4 style="text-align:center;">Tickets</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.SubmitedByID, "Submited By", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.TSTEmployee.Fname)
                @Html.ValidationMessageFor(model => model.SubmitedByID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TechID, "Tech Assigned", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TechID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TechID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Subject)
                @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatedDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.CreatedDate)
                @Html.ValidationMessageFor(model => model.CreatedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ResolutionDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ResolutionDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.ResolutionDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StatusID, "StatusID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("StatusID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StatusID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PriorityID, "PriorityID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("PriorityID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PriorityID, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-danger" />
            </div>
        </div>
    </div>
}
<div id="notes">
    @*Notes are here  Viewing them here*@
    <h4>Tech Notes:</h4>
    @foreach (var note in Model.TSTTechNotes)
            {
        <p>
            @note.Notes by <strong>@note.TSTEmployee.Fname</strong> on <strong>@string.Format("{0:g}", note.TimeCreated)</strong>
        </p>
                <hr />
    }
</div>
@*Edit/Add notes*@
<fieldset>
    <legend>Add Tech Note</legend>
    <p>Note: <textarea id="noteText"></textarea></p>
    <p><input type="button" value="Add Note" id="btnAddNote" class="btn btn-danger" /></p>
</fieldset>

<div style="text-align:center;">
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
</div>

@section Scripts {
     @*call the method in the controller to add a tech note*@
    <script>
        $(function () {
            // assign the click function of the button above
            $("#btnAddNote").click(function () {
                //quick test
                //console.log("You clicked the add button")
                // get the value from the notes being entered and assing to a var
                var note = $("#noteText").val();

                // when adding the note (during the asynch call, add this note info) to the notes div (display) above and clear out note textarea.
                $.ajax({
                    // url: /contorller name/ AddTechNote?ticketID=x&note=(more info)
                    url: "/TSTTickets/AddTechNote?ticketID=@Model.ID&note=" + note, success: function (data) {
                        //display the new note at the bottom of the existitng list of notes. no formatting here, the UI has no idea whats going on right now.
                        $("#notes").append("<p>" + data.TechNotes + " by " + data.Tech + " on " + data.Date + "</p>");

                        // clear the notes textarea
                        $("#noteText").val("");
                    }
                });
            });
        });
    </script>

    @Scripts.Render("~/bundles/jqueryval")
}
